using System.Security.Cryptography;
using System.Text;

namespace welearn.net.play.Doodle;

public static class AesCrypto
{
    // Generated by gemini.google.com
    public static string Encrypt(string plainText, byte[] keyBytes)
    {
        // Convert key and text to byte arrays
        // var keyBytes = Encoding.UTF8.GetBytes(secretKey);
        var plainBytes = Encoding.UTF8.GetBytes(plainText);

        // Create a new Aes object with CBC mode and PKCS7 padding
        using var aes = Aes.Create();
        aes.Key = keyBytes;

        // Generate a random initialization vector (IV)
        var iv = new byte[aes.BlockSize / 8];
        using (var rng = RandomNumberGenerator.Create()) rng.GetBytes(iv);

        // Create an encryptor
        using var encryptor = aes.CreateEncryptor(keyBytes, iv);

        // Create a memory stream to hold the encrypted data
        using var msEncrypt = new MemoryStream();
        // Create a crypto stream for encryption
        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
        {
            // Write the plaintext bytes to the crypto stream, which will encrypt them
            csEncrypt.Write(plainBytes, 0, plainBytes.Length);
            csEncrypt.FlushFinalBlock();
        }

        // Get the encrypted bytes from the memory stream
        var cipherBytes = msEncrypt.ToArray();

        // Combine the IV and ciphertext
        var combined = new byte[iv.Length + cipherBytes.Length];
        Buffer.BlockCopy(iv, 0, combined, 0, iv.Length);
        Buffer.BlockCopy(cipherBytes, 0, combined, iv.Length, cipherBytes.Length);

        // Convert the encrypted bytes to a Base64-encoded string
        return Convert.ToBase64String(combined);
    }
    
    public static string Encrypt2(string plainText, byte[] keyBytes)
    {
        // Convert key and text to byte arrays
        var plainBytes = Encoding.UTF8.GetBytes(plainText);
        // Create a new Aes object with CBC mode and PKCS7 padding
        using var aes = Aes.Create();
        aes.Key = keyBytes;
        // Generate a random initialization vector (IV)
        var iv = new byte[aes.BlockSize / 8];
        Random.Shared.NextBytes(iv);

        var cipherBytes = aes.EncryptCbc(plainBytes, iv);
        var combined = iv.Concat(cipherBytes).ToArray();
        // Convert the encrypted bytes to a Base64-encoded string
        return Convert.ToBase64String(combined);
    }

    public static string Decrypt(string cipherBase64, string keyBase64) =>
        Decrypt(
            Convert.FromBase64String(cipherBase64),
            Convert.FromBase64String(keyBase64)
        );

    public static string Decrypt(byte[] cipher, byte[] keyBytes)
    {
        using var aes = Aes.Create();
        aes.Key = keyBytes;

        var ivSize = aes.BlockSize / 8;
        var plainBytes = aes.DecryptCbc(cipher[ivSize..], cipher[..ivSize]);

        return Encoding.UTF8.GetString(plainBytes);
    }

    public static void Test()
    {
        // var keyBytes = new byte[32];
        // Random.Shared.NextBytes(keyBytes);
        // var stringKey = Convert.ToBase64String(keyBytes);
        // Console.WriteLine($"Key: {stringKey}");

        const string stringKey = "OC7T00PwmpvrLUHuA7PlgiU0b7DPs4aeWjBB622Gmp4=";
        var keyBytes = Convert.FromBase64String(stringKey);

        const string plainText = "010583";
        var cipherText = AesCrypto.Encrypt2(plainText, keyBytes);
        Console.WriteLine($"Encrypted text: {cipherText}");

        var res = AesCrypto.Decrypt(cipherText, stringKey);
        Console.WriteLine($"Decrypt result: {plainText.Equals(res)}");
    }
}