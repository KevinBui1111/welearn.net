using System.Drawing;
using welearn.net.algo.piece.HackerRank;

namespace welearn.net.algo.TestAlgo.HackerRank;

public class MaxPointsALineTest {
    public static IEnumerable<object[]> MaxPointsData {
        get {
            yield return new object[] {
                new[] {
                    new[] { 1, 1 }, new[] { 2, 2 }, new[] { 3, 3 }
                },
                3
            };
            yield return new object[] {
                new[] {
                    new[] { 1, 1 }, new[] { 3, 2 }, new[] { 5, 3 }, new[] { 4, 1 }, new[] { 2, 3 }, new[] { 1, 4 }
                },
                4
            };
            yield return new object[] {
                new[] {
                    new[] { 2, 3 }, new[] { 3, 3 }, new[] { -5, 3 }
                },
                3
            };
            yield return new object[] {
                new[] {
                    new[] { 7, 3 }, new[] { 19, 19 }, new[] { -16, 3 }, new[] { 13, 17 }, new[] { -18, 1 },
                    new[] { -18, -17 }, new[] { 13, -3 }, new[] { 3, 7 }, new[] { -11, 12 }, new[] { 7, 19 },
                    new[] { 19, -12 }, new[] { 20, -18 }, new[] { -16, -15 }, new[] { -10, -15 }, new[] { -16, -18 },
                    new[] { -14, -1 }, new[] { 18, 10 }, new[] { -13, 8 }, new[] { 7, -5 }, new[] { -4, -9 },
                    new[] { -11, 2 }, new[] { -9, -9 }, new[] { -5, -16 }, new[] { 10, 14 }, new[] { -3, 4 },
                    new[] { 1, -20 }, new[] { 2, 16 }, new[] { 0, 14 }, new[] { -14, 5 }, new[] { 15, -11 },
                    new[] { 3, 11 }, new[] { 11, -10 }, new[] { -1, -7 }, new[] { 16, 7 }, new[] { 1, -11 },
                    new[] { -8, -3 }, new[] { 1, -6 }, new[] { 19, 7 }, new[] { 3, 6 }, new[] { -1, -2 },
                    new[] { 7, -3 }, new[] { -6, -8 }, new[] { 7, 1 }, new[] { -15, 12 }, new[] { -17, 9 },
                    new[] { 19, -9 }, new[] { 1, 0 }, new[] { 9, -10 }, new[] { 6, 20 }, new[] { -12, -4 },
                    new[] { -16, -17 }, new[] { 14, 3 }, new[] { 0, -1 }, new[] { -18, 9 }, new[] { -15, 15 },
                    new[] { -3, -15 }, new[] { -5, 20 }, new[] { 15, -14 }, new[] { 9, -17 }, new[] { 10, -14 },
                    new[] { -7, -11 }, new[] { 14, 9 }, new[] { 1, -1 }, new[] { 15, 12 }, new[] { -5, -1 },
                    new[] { -17, -5 }, new[] { 15, -2 }, new[] { -12, 11 }, new[] { 19, -18 }, new[] { 8, 7 },
                    new[] { -5, -3 }, new[] { -17, -1 }, new[] { -18, 13 }, new[] { 15, -3 }, new[] { 4, 18 },
                    new[] { -14, -15 }, new[] { 15, 8 }, new[] { -18, -12 }, new[] { -15, 19 }, new[] { -9, 16 },
                    new[] { -9, 14 }, new[] { -12, -14 }, new[] { -2, -20 }, new[] { -3, -13 }, new[] { 10, -7 },
                    new[] { -2, -10 }, new[] { 9, 10 }, new[] { -1, 7 }, new[] { -17, -6 }, new[] { -15, 20 },
                    new[] { 5, -17 }, new[] { 6, -6 }
                },
                6
            };

            yield return new object[] {
                new HashSet<(int, int)> {
                        (-32, 7), (41, -16), (-35, 0), (33, -11), (30, -17),
                        (19, -5), (-22, 24), (-3, -23), (8, -22), (-50, 47),
                        (-39, 26), (-7, 17), (42, 21), (-6, 12), (42, 20),
                        (-41, -12), (-6, -48), (41, -23), (-29, 4), (-46, -17),
                        (40, -24), (20, 10), (-14, 11), (-2, -15), (-38, 11),
                        (-18, -49), (-43, -39), (11, 7), (42, 13), (11, -42),
                        (-50, -1), (-25, -40), (12, -47), (25, -17), (22, 27),
                        (3, 27), (-30, -49), (-14, 18), (24, -7), (-2, -18),
                        (45, 39), (26, -2), (27, 17), (41, 6), (45, -40),
                        (-5, 9), (-49, 29), (46, 18), (-45, -28), (-3, 48),
                        (-3, -42), (22, 25), (24, -2), (-26, 10), (-3, 22),
                        (-30, 16), (14, 37), (-4, 35), (22, 35), (-27, -20),
                        (0, -30), (31, 25), (-22, 31), (39, 11), (-36, -48),
                        (7, 21), (-17, 25), (44, 10), (17, 4), (-22, -8),
                        (-1, 8), (23, -20), (-49, 27), (-21, -43), (-6, 43),
                        (10, 8), (-26, -18), (-8, -22), (-33, 22), (-28, 32),
                        (-43, 5), (30, 42), (-48, 49), (-1, -45), (14, 45),
                        (25, -15), (-1, 41), (37, -41), (-23, 14), (45, -41),
                        (-10, 16), (-20, -18), (12, -25), (-40, -25), (-17, 13),
                        (-20, 41), (20, -8), (19, -10), (-17, 47), (29, -46),
                        (30, 30), (-12, -16), (-42, 33), (45, 5), (-7, 49),
                        (37, 20), (11, 3), (-15, 37), (24, 30), (-20, -44),
                        (16, -42), (-21, -39), (-7, -33), (-16, -41), (-30, 21),
                        (-34, -29), (7, -17), (-33, 11), (-27, 6), (21, 25),
                        (-47, 49), (-16, -9), (-11, -9), (-5, 45), (46, 39),
                        (39, -44), (40, -2), (-3, -29), (-30, -9), (18, -38),
                        (-39, 42), (-50, -35), (-6, -30), (29, 6), (35, 20),
                        (-25, -18), (-33, 26), (19, 35), (-9, 47), (-11, -32),
                        (-13, 1), (19, 37), (-16, -42), (-31, -17), (4, -5),
                        (-26, 13), (1, 4), (-13, -38), (-37, -6), (-8, 0),
                        (-14, -49), (48, 29), (-13, 36), (-20, 5), (47, 45),
                        (-39, 36), (34, 12), (15, 20), (31, 22), (37, -24),
                        (24, 46), (7, 17), (-23, 4), (-4, 11), (46, -46),
                        (26, 9), (32, -23), (18, 18), (-13, 26), (-5, -50),
                        (15, -46), (-20, 39), (-40, 39), (40, 4), (-17, 15),
                        (-4, 1), (-21, 28), (-20, -10), (9, -36), (41, 22),
                        (-17, -36), (-43, -50), (-11, -8), (-17, -12), (-17, 16),
                        (40, 23), (-27, 20), (-27, 7), (27, 19), (-45, 26),
                        (-18, 26), (7, 10), (32, 38), (46, -8), (-25, 7),
                        (5, -35), (22, -42), (21, 38), (2, 34), (-48, 30),
                        (38, 47), (-6, 33), (12, 21), (-38, 33), (19, -4),
                        (-22, 32), (49, -6), (-23, -46), (-4, -22), (-21, 38),
                        (4, -11), (-35, 48), (-36, -17), (-26, 45), (-23, 6),
                        (-34, 12), (49, -30), (-11, -31), (-45, -45), (-29, -43),
                        (-27, 8), (-23, 20), (23, -40), (-39, 7), (18, 19),
                        (-31, -15), (24, 31), (40, 35), (-49, -42), (-33, -35),
                        (-29, -5), (1, 21), (17, -4), (-10, 23), (17, 47),
                        (34, 10), (-21, -33), (22, -36), (-39, 10), (-13, -18),
                        (27, -36), (-38, -25), (5, 31), (-20, 49), (45, 7),
                        (30, -33), (13, -6), (7, -10), (-9, -18), (22, 42),
                        (41, 16), (-48, 29), (-20, -11), (33, -48), (21, -40),
                        (30, 0), (-39, 14), (14, 32), (27, 46), (-49, 10),
                        (20, -32), (26, -5), (35, 35), (-28, 38), (-39, 2),
                        (26, 47), (17, -34), (-36, -47), (12, -34), (18, -5),
                        (19, -37), (-40, -17), (-39, 17), (-13, -13), (-45, 24),
                        (4, -39), (-38, 2), (38, -47), (29, -2), (34, 21),
                        (-27, 21), (39, -17), (-42, 45), (-22, 7), (15, -2),
                        (-49, 38), (-34, -38), (-33, 45), (-7, -28), (43, -10),
                        (9, -34), (-23, -14), (28, 45), (-35, -49), (-47, 36)
                    }
                    .Select(p => new[] { p.Item1, p.Item2 })
                    .ToArray(),
                8
            };

            var rnd2 = new Random(2);
            yield return new object[] {
                GeneratePoints(rnd2, 500, 20),
                19
            };
            yield return new object[] {
                GeneratePoints(rnd2, 300, 30),
                12
            };

            yield break;

            int[][] GeneratePoints(Random rnd, int size, int bound) =>
                Enumerable.Range(1, size)
                    .Select(_ =>
                        (rnd.Next(-bound, bound), rnd.Next(-bound, bound))
                    )
                    .ToHashSet()
                    .Select(p => new[] { p.Item1, p.Item2 })
                    .ToArray();
        }
    }

    [Theory]
    [MemberData(nameof(MaxPointsData))]
    public void Test(int[][] points, int expected) {
        var actual = MaxPointsALine.MaxPoints(points);
        Assert.Equal(expected, actual);
    }

    [Theory]
    [MemberData(nameof(MaxPointsData))]
    public void Test2(int[][] points, int expected) {
        var actual = MaxPointsALine.MaxPoints2(points);
        Assert.Equal(expected, actual);
    }

    [Theory]
    [MemberData(nameof(MaxPointsData))]
    public void Test3(int[][] points, int expected) {
        var actual = MaxPointsALine.MaxPoints3(points);
        Assert.Equal(expected, actual);
    }

    [Theory]
    [MemberData(nameof(MaxPointsData))]
    public void Test4(int[][] points, int expected) {
        var actual = MaxPointsALine.MaxPoints4(points);
        Assert.Equal(expected, actual);
    }
}